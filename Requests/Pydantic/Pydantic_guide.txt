Pydantic — это библиотека для Python, предназначенная для валидации данных.
Она помогает гарантировать, что данные от сервера соответствуют установленным правилам и типам.
При тестировании API Pydantic проверяет наличие и количество определенных полей и тип данных их значений.

> pip install pytest pydantic requests Faker allure-pytest

Создать в корневой папке проекта папку services —> *папка с именем конкретного сервиса(напр. users)* —> models —> user_model.py
В нем написать:

___________________________________________________________
from pydantic import BaseModel, field_validator


class UserModel(BaseModel):     # пример написания ожидаемой модели данных ответа сервера (в виде класса для конкретного сервиса)
    email: str
    name: str
    nickname: str
    uuid: str


Можно написать кастомные методы валидации отдельно для каждого поля (напр., что поле email должно быть определенной длины).
Пример валидатора:

    'Проверка того, что значения полей в json-ответе не пустые'
    @field_validator("email", "name", "nickname", "uuid")   # импортируемый декоратор Pydantic прин. на вход названия полей из модели выше
    def fields_are_not_empty(cls, value):
        if value == "" or value is None:
            raise ValueError("Пустое или отсутствующее значение у поля")   # в случае True выпадет исключение с ошибкой и кастом. сообщ.
        else:
            return value
___________________________________________________________

Дальше этот класс UserModel нужно импортировать в
api_users.py внутри которого в классе UsersAPI находятся все методы-шаги для проверок API сервиса,
который в свою очередь импортируется в
base_test.py внутри которого в классе BaseTest находится сетап-метод инициализации API конкр. сервиса (для мультисервисности тестов),
который в свою очередь импортируется в
test_users.py



(путь: services —> *папка с именем конкретного сервиса(напр. users)* —> api_users.py)