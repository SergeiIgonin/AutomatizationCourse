*** БАЗОВЫЕ КОМАНДЫ DOCKER (для терминала Pycharm или для Windows powershell с правами админа) ***

  > ${PWD}                              # показать путь до текущей папки (Linux-команда)
  > docker version                      # показать версию докера (если Docker Desktop остановлен, то выдаст ошибку)
  > docker ps                           # показать список запущенных контейнеров
  > docker ps -a                        # показать список запущенных и остановленных контейнеров
  > docker images                       # показать список локальных образов
  > docker run {image}                  # запустить контейнер из выбранного образа
  > docker run {image}:{version}        # то же самое с указанием тега с версией образа (по умолчанию версия 'latest')
  > docker rm {container}               # удалить контейнер по id/name (генерируются при создании контейнера)
  > docker run --rm {image}             # автоматически удалить контейнер после его остановки
  > docker run  --name {container_name} {image}   # запустить контейнер из выбранного образа с указанием кастом. имени контейнера
  > docker run -d {image}               # запустить контейнер из выбранного образа в фоновом режиме
  > docker stop {container}             # остановить запущенный контейнер по id/name
  > docker stop {container_1} {container_2}       # остановить несколько контейнеров (указать id/name через пробелы)
  > docker kill {container}             # уничтожить запущенный контейнер по id/name (принудительно и моментально)
  > docker container prune              # удалить все остановленные контейнеры и очистить их список

docker run hello-world — запустим контейнер из офиц. образа "hello-world".
(Сначала докер будет искать такой образ локально, а если его нет он обратится на DockerHub и скачает образ оттуда.
В случае успеха будет ответ "Hello from Docker!" и описание шагов которые перед этим совершил докер.
При этом в самом докер клиенте будет создан образ и контейнер с именем "hello-world"
Если у нас на ПК уже есть скачанный образ, то на его основе мы можем создавать контейнеры без повт. скачивания образа с DockerHub.

____________________________________________________________________________________________________________
*** ПОДКЛЮЧЕНИЕ К КОНТЕЙНЕРУ BUSYBOX (офиц. образ, который создает контейнер с linux оболочкой sh) ***

docker run busybox — скач. образ с DockerHub, запустится контейнер, но будет сразу остановлен, т.к. к его процессу нужно подключиться

  > docker run -it {image}              # запустить контейнер из выбранного образа и подключиться к процессу внутри контейнера

docker run -it busybox — подключимся и попадем внутрь контейнера (внутрь оболочки sh). Выполним команды внутри оболочки:
/ # ls                                  # показать директории внутри контейнера
/ # hostname                            # показать ID контейнера
/ # hostname -i                         # показать ip-адрес контейнера
/ # ping 8.8.8.8 или ping google.com    # проверить доступ в internet внутри контейнера (8.8.8.8 - DNS сервер google)
/ # exit                                # завершить текущий процесс внутри контейнера (контейнер остановится автоматически)
docker stop {container} — остановим текущий контейнер по id/name

____________________________________________________________________________________________________________
*** ПОДКЛЮЧЕНИЕ К КОНТЕЙНЕРУ NGINX (офиц. образ по созданию конт. с web-сервером со статическими файлами) ***

docker run nginx — после создания контейнера терминал автоматически подключается к процессу вывода логов из контейнера nginx,
для избежания этого нужно запустить контейнер в фоновом режиме.
В окне с логами нажмем Ctrl+C — остановим процесс внутри контейнера (следовательно, и сам контейнер).
docker run -d nginx — запустим контейнер из образа nginx в фоновом режиме.

  > docker container inspect {container}                     # вывести полную информацию о контейнере
  > docker container inspect {container} | grep IPAdress     # инспектировать контейнер с фильтром по выбр. полю - не раб. :(

Запустим контейнер в фоне (при этом мы остаемся в командной стоке), проинспектируем его и найдем ip адрес.
Скопируем ip-адресс и вставим в адресную строку браузера — будет ошибка подключения.

  > docker exec -it {container} {process}       # запустить в выбранном запущенном контейнере доп. процесс

docker exec -it {container_id/name} bash — запустим доп. процесс bash внутри контейнера. Выполним команды внутри оболочки:
/ # ls
/ # сd usr/share/nginx/html             # перейти в папку с файлом html с указанием пути к папке (путь посмотреть в DockerDesktop)
/ # ls -la                              # показать файлы внутри текущей директории
/ # cat index.html                      # чтение указанного файла (его содержимое увидим в браузере после подкл. к контейнеру)
/ # exit

docker run -d  --name my_nginx nginx — теперь создадим контейнер с присвоением ему имени на основе того же образа NGINX,
docker stop —> docker prune — остановим контейнер и очистим список всех остановленных контейнеров.

МАППИНГ ПОРТОВ:

  > docker run -p {внутр_порт}:{внешн_порт} {image}

docker run -d -p 8080:80 nginx — создадим и подкл. в фоне к конт. образа NGINX с указанием порта своего ПК и порта контейнера.
(*) Все серверы внутри контейнеров по умолчании работают на порте 80, но внешние порты должны быть разными.
В адресной строке браузера введем "localhost:8080" — мы на html странице NGINX (т.е. мы подкл. к серверу NGINX внутри контейнера)
docker run -d -p 8081:80 nginx — так мы параллель ножем создать и подключиться к другому аналогичному контейнеру.
doker stop {container_1} {container_2}
echo ${PWD} — показать абсолютный путь к текущей папке
Маппинг томов — привязывание папок со своего ПК к папкам внутри контейнера (для автоматизации излишне).
Длинные команды можно построчно переносить обратным слэшем "\"

МАППИНГ ТОМОВ (папок):

  > docker run -v {абсолютный путь к нужной папке на ПК}:{путь к папке в контейнер} {image}

(!) В Пути к папке на ПК с ОС Windows ставятся обр.слэши: "\" , а в пути к папке внутри контейнера — обычные: "/"
Маппинг портов и томом можно делать одновременно при создании контейнера, также добавлять и другие команды.

____________________________________________________________________________________________________________
*** СОЗДАНИЕ СОБСТВЕННОГО ОБРАЗА (для последующего запуска на их основе своих автотестов в контейнерах) ***

Для создания образа необходимо в корне папки проекта создать файл с названием "Dockerfile" без точки и расширения.
Dockerfile это специальный файл содержащий инструкции по созданию образа.
Все образы и их слои создаются на основе базового образа и их слоев. После монтирования образ создается локально на нашем ПК.

Структура Dockerfile для автотестов:
----------------------------------------------------------
FROM python                             # указание базового образа и его версии (alpine — тег/версия образа (иначе будет 'latest'))
COPY requirements.txt .                 # копирование файла requirements.txt из текущей папки в корень контейнера
COPY test_main.py .                     # копирование файла из текущей папки в корень контейнера
RUN mkdir allure-results                # "RUN" исполняет команды в терминале (здесь поочередно прописываем все необходимые команды)
RUN pip install -r requirements.txt
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -   # здесь и ниже 2 строки по установке Chrome
RUN sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
RUN apt-get update && apt-get install -y google-chrome-stable
CMD ["pytest", "test_main.py", "--alluredir=allure-results"]    # указание процессов для запуска внутри контейнера при его создании
----------------------------------------------------------
Дополнительные возможные строки для Dockerfile:
WORKDIR /docker_tests                   # создает рабочую директорию внутри образа (т.е. внутри образа будет создана папка 'app')
EXPOSE 80/tcp                           # открывает указанный порт и протокол у контейнера (для возможности подключения к нему)
COPY . .                                # копировать все из текущей папки на ПК (из корня проекта) в папку 'tests' внутри контейнера

  > docker build .                      # старт сборки образа (ставим . при наборе команды из корня проекта (где и лежит Dockerfile))
  > docker build . -t autotests:4.1.3   # старт сборки образа с присвоением ему имени и тега (без указания тега он будет 'latest')

Основные шаги по созданию образа и запуска из него контейнера с нужным процессом внутри:
1. На ПК предварительно запустить DockerDesktop.
2. В корневой папке проекта создать папку (напр., Tests), в которой будут лежать другие папки/файлы необходимые для автотестов.
3. В корневой папке проекта, параллельно к папке Tests, создать Dockerfile и прописать в нем необходимые команды.
4. Находясь в корневой папке проекта (где лежит Dockerfile) ввести в терминале команду для старта сборки образа.
5. Ввести в терминале команду для запуска контейнера на основе созданного образа c маппингом томов:
   docker run -v D:\PycharmProjects\Multilanguage\allure-results:\allure-results docker_tests   (папка на ПК:папке в контейнере)
6. Ввести в терминале команду для просмотра Allure-отчета: allure serve docker-results



--------------------------------------
        Окулик. Запуск автотестов в Docker container: https://www.youtube.com/watch?v=6naiaHMG0DE
        Стащук. Полный курс Docker Для Начинающих: https://www.youtube.com/watch?v=_uZQtRyF6Eg